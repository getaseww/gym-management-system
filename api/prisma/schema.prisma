// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  sex         String
  email       String?   @unique(map: "email") @db.VarChar(255)
  phoneNumber String    @unique()
  password    String?   @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @db.Timestamp(0)

  image String?

  roleId  String    @unique
  role    Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  class   Class[]   @relation("userId")
  instructor  Class[]   @relation("instructorId")
  payment Payment[]

  @@index([roleId])
}

model Role {
  id   String @id @default(uuid())
  name String

  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  user      User?
}

model MembershipPlan {
  id          String  @id @default(uuid())
  planName    String
  description String? @db.Text()
  price       Float

  createdAt  DateTime?    @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?    @db.Timestamp(0)
  membership Membership[]
  payment    Payment?
}

model Membership {
  id        String    @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    String
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)

  membershipPlanId String
  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade)
}

model Class {
  id          String   @id @default(uuid())
  className   String
  description String   @db.Text()
  startDate   DateTime
  endDate     DateTime

  userId String
  user   User   @relation("userId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  instructorId String
  instructor   User   @relation("instructorId", fields: [instructorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt  DateTime?    @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?    @db.Timestamp(0)
  attendance Attendance[]
}

model Attendance {
  id           String   @id @default(uuid())
  date         DateTime
  status       String
  checkInTime  String?
  checkOutTime String?
  classId      String
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model Payment {
  id      String @id @default(uuid())
  amount  Float
  trx_ref String
  status  String

  membershipPlanId String         @unique
  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  useer  User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model EquipmentCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  equipment   Equipment[]
}

model Equipment {
  id            String  @id @default(uuid())
  equipmentName String
  brand         String?
  price         Float?
  model         String?
  status        String?

  purchaseDate       DateTime?
  warrantyExpiryDate DateTime?
  description        String?   @db.Text()

  equipmentCategoryId String
  equipmentCategory   EquipmentCategory @relation(fields: [equipmentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt DateTime?   @db.Timestamp(0)
  inventory Inventory[]
}

model Inventory {
  id          String    @id @default(uuid())
  quantity    Int
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
